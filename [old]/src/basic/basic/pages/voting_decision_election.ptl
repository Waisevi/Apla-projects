Div(content-wrapper){
    If(#vID# > 0){
        DBFind(Name: votings, Source: src_voting).Columns("id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params").Where("id=#vID#").Vars(instance)

        SetTitle($subject_voting$)
        Div(breadcrumb){
            LinkPage($voting$, voting_list)
            Span(/).Style(margin-right: 10px; margin-left: 10px;)
            LinkPage(#instance_voting_name#, voting_view,, "vID=#vID#")
            Span(/).Style(margin-right: 10px; margin-left: 10px;)
            Span(Class: text-muted, Body: $subject_voting$)
        }

        Div(row){
            Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){
                Form(panel panel-primary){
                    Div(panel-body){
                        Div(list-group-item){
                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(candidates)).(Class: text-danger, Body:*)
                                    }
                                }
                                Div(col-md-9 mc-sm text-left){
                                    Div(input-group){
                                        DBFind(keys,src_keys).Columns("id").Custom(_name){
                                            DBFind(members).Columns("id,member_name").Where("id=#id#").Vars(m)
                                            Address(#id#)
                                            If(Or(#m_id#>0,#m_id#<0)){
                                                " (#m_member_name#)"
                                            }
                                        }
                                        Select(Name: memberID, Source: src_keys, NameColumn: _name, ValueColumn: id)
                                        Div(input-group-btn){
                                            Button(Body: LangRes(add), Class: btn btn-primary, Page: voting_decision_election, PageParams: "vID=#vID#", Contract: voting_SubjectCandidates)
                                        }
                                    }
                                }
                            }
                            Div(row){
                                Div(col-lg-8 col-lg-offset-3){
                                    DBFind(Name: votings_subject, Source: src_subject).Columns("id,subject->member_id,subject->member_name").Where("voting_id=#vID#").Custom(custom_address){
                                        Address(#subject.member_id#)
                                    }.Custom(custom_member){
                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: "v_member_id=#subject.member_id#"){
                                            Span(Body: #subject.member_name#)
                                        }
                                    }
                                    Table(src_subject, "$candidates$=custom_member,$address$=custom_address")
                                }
                            }
                        }
                        Div(list-group-item){
                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(role)).(Class: text-danger, Body:*)
                                    }
                                }
                                Div(col-md-9 mb-sm text-left){
                                    DBFind(Name: roles, Source: src_roles).Columns("id,role_name").Where("role_type=2 and deleted=0").Count(count_roles)
                                    If(#count_roles#>0){
                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)
                                    }.Else{
                                        elected role is not found
                                    }
                                }
                            }

                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(vacancies)).(Class: text-danger, Body:*)
                                    }
                                }
                                Div(col-md-9 mc-sm text-left){
                                    Input(Name: vacancies, Class: form-control, Type: Number, Value: #instance_optional_role_vacancies#)
                                }
                            }
                        }
                        Div(list-group-item){
                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(contract_accept))
                                    }
                                }
                                Div(col-md-9 mb-sm text-left){
                                    Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: "$contract_accept_des$").Validate(minLength:3, maxLength:255)
                                    InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)
                                }
                            }
                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(params))
                                    }
                                }
                                Div(col-md-9 mb-sm text-left){
                                    Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: "$contract_params_des$")
                                }
                            }
                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(contract_reject))
                                    }
                                }
                                Div(col-md-9 mb-sm text-left){
                                    Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: "$contract_reject_des$").Validate(minLength:3, maxLength:255)
                                    InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)
                                }
                            }
                            Div(row){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(params))
                                    }
                                }
                                Div(col-md-9 mc-sm text-left){
                                    Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: "$contract_params_des$")
                                }
                            }
                        }
                    }
                    Div(panel-footer text-right){
                        Div(pull-left){
                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: "vID=#vID#")
                        }
                        Input(Name: votingID, Type: hidden, Value: #vID#)
                        Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: "vID=#vID#", Contract: voting_SubjectSettings)
                    }
                }
            }
        }
    }.Else{
        Div(md-12 alert alert-danger text-center){
            Span(Body: LangRes(attention))
        }
    }
}