contract buffer_Manager {
    data {
        Action string
        Key string
        Val string "optional"
    }
    func decodeArray(s string) array{
        var ar array
        if HasPrefix($buf["value"], "[") && Substr($buf["value"], Size($buf["value"])-1, 1) == "]"{
            ar = JSONDecode($buf["value"])
        }
        return ar
    }
    conditions {
        $emptyVal = JSONEncode("")
        $buf = DBFind("buffer_data").Where("key=? and member_id=?", $Key, $key_id).Row()
        if !$buf {
            var buf map, id int
            id = DBInsert("buffer_data", "key,value,member_id", $Key, $emptyVal, $key_id)
            buf["id"] = Str(id)
            buf["value"] = ""
            buf["member_id"] = Str($key_id)
            buf["key"] = Str($Key)
            $buf = buf
        }
    }

    action {
        if $Action == "clean" {
            DBUpdate("buffer_data", Int($buf["id"]), "value", $emptyVal)
        }
        if $Action == "set" {
            DBUpdate("buffer_data", Int($buf["id"]), "value", $Val)
        }
        if $Action == "array_add_value" {
            var ar array
            ar = decodeArray($buf["value"])
            ar[Len(ar)] = $Val
            DBUpdate("buffer_data", Int($buf["id"]), "value", JSONEncode(ar))
        }
        if $Action == "array_remove_value" {
            var ar arNew array, i int
            ar = decodeArray($buf["value"])
            while i<Len(ar){
                if ar[i] != $Val{
                    arNew[Len(arNew)] = ar[i]
                }
                i=i+1
            }
            DBUpdate("buffer_data", Int($buf["id"]), "value", JSONEncode(arNew))
        }
    }
}
