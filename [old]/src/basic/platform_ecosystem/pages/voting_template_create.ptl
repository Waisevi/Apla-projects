DBFind(Name:applications, Source:src_app).Columns("name,id").Where("name='Basic application'").Vars(application)
SetTitle($template_create$)

If(#TemplateId#>0){
    DBFind(voting_templates, template).Where(id=#TemplateId#).Vars(template)
    SetVar(title, #template_title#)
    SetVar(typevoting, #template_type_voting#)
    SetVar(volume, #template_volume#)
    SetVar(subj, #template_subject#)
    SetVar(quorum, #template_quorum#)
    SetVar(voters, #template_voters#)
    SetVar(candidates, #template_voters#)
    SetVar(vacancies, #template_vacancies#)
    SetVar(contract_init, #template_init_contract#)
    SetVar(contract_accept, #template_contract_accept#)
    SetVar(accept_params, #template_accept_params#)
    SetVar(contract_reject, #template_contract_reject#)
    SetVar(reject_params, #template_reject_params#)

}.Else{
    SetVar(template_id, 0)
    SetVar(title, New voting)
    SetVar(typevoting, 0)
    SetVar(volume, 50)
    SetVar(quorum, 51)
    SetVar(subj, "")
    SetVar(voters, "")
    SetVar(candidates, "")
    SetVar(vacancies, 1)
    SetVar(contract_init, "")
    SetVar(contract_accept, "")
    SetVar(accept_params, "")
    SetVar(contract_reject, "")
    SetVar(reject_params, "")

}
If(#TypeDecision#>0){
    SetVar(typedec,#TypeDecision#)
}.Else{
    SetVar(typedec,0)
}
If(#TypeParticipants#>0){
    SetVar(typepart,#TypeParticipants#)
}.Else{
    SetVar(typepart,0)
}
AppParam(App:#application_id#, Name: type_voting_participants, Source: src_typepart)
AppParam(App:#application_id#, Name: type_voting, Source: src_typevoting)
AppParam(App:#application_id#, Name: type_voting_decisions, Source: src_typedec)
DBFind(Name: roles, Source: src_roles).Where("deleted=0").Order(id).Custom(name){
    #role_name#
}

If(#typedec#>0){
    Data(data_inputs, "data"){
        commons_req
        decisions
        participants
        commons
    }
    Data(commons_req, "name,type,res,star,value,control,src,desc"){
        Title,text,name,*,#title#,input,"",""
        TypeParticipants,text,participants,*,#typepart#,disabled,"AppParam(App:#application_id#, Name: type_voting_participants, Index: #typepart#)",""
        TypeDecision,text,decision,*,#typedec#,disabled,"AppParam(App:#application_id#, Name: type_voting_decisions, Index: #typedec#)",""
        TypeVoting,text,voting_type,*,#typevoting#,select,src_typevoting,""
        Volume,number,voting_volume,*,#volume#,validate,"",$voting_volume_desc$
        Quorum,number,voting_quorum,*,#quorum#,validate,"",$voting_quorum_desc$
        Subject,text,voting_subject,*,#subj#,input,"",""
    }
    Data(commons, "name,type,res,star,value,control,src,desc"){
        InitContract,text,voting_init_contract,"",#contract_init#,input,"",$voting_init_contract_desc$
        ContractAccept,text,voting_contract_accept,"",#contract_accept#,contract,ParamsAccept,#accept_params#
        ContractReject,text,voting_contract_reject,"",#contract_reject#,contract,ParamsReject,#reject_params#
    }
    If(Or(#typedec#==1,#typedec#==2)){
        Data(decisions, "name,type,res,star,value,control,src,desc"){
            Vacancies,number,vacancies,"*",#vacancies#,input,"",""
            Candidates,text,candidates_role,"*",#voters#,select,src_roles,""
        }
    }.Else{
        Data(decisions, "name,type,res,star,value,control,src,desc"){}
    }
    If(#typepart#==3){
        Data(participants,"name,type,res,star,value,control,src,desc"){
            Voters,text,voters_role,"*",#voters#,select,src_roles,""
        }
    }.Else{
        Data(participants,"name,type,res,star,value,control,src,desc"){}
    }
}.Else{
    Data(data_inputs, "data"){
        commons
    }
    Data(commons, "name,type,res,star,value,control,src,desc"){
        TypeDecision,text,decision,*,#template_type_decision#,radio,src_typedec,""
        TypeParticipants,text,participants,*,#template_type_participants#,select,src_typepart,""
    }
}
Div(content-wrapper){
    Div(breadcrumb){
        LinkPage($voting_templates$, voting_templates_list)
        Span(/).Style(margin-right: 10px; margin-left: 10px;)
        Span(Class: text-muted, Body: $template_create$)
    }
    Div(row){
        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){
            Form(panel panel-primary){
                Div(panel-heading){LangRes(voting_params)}
                Div(panel-body){
                    ForList(data_inputs){
                        ForList(#data#){
                            Div(row form-group){
                                Div(col-md-4 mt-sm text-right){
                                    Label(For: #name#){
                                        LangRes(#res#)
                                        If(#star#=="*"){
                                            Span(Class: text-danger, Body:*)
                                        }
                                    }
                                }
                                Div(col-md-8 text-left){
                                    If(#control#=="select"){
                                        Select(Name: #name#, Source: #src#, NameColumn: name, ValueColumn: id, Value: #value#)
                                    }.ElseIf(#control#=="disabled"){
                                        #src#
                                        Input(Name: #name#, Type: hidden, Value: #value#)
                                    }.ElseIf(#control#=="input"){
                                        Input(Name: #name#, Value: #value#, Type: #type#)
                                    }.ElseIf(#control#=="validate"){
                                        Input(Name: #name#, Type: #type#, Value: #value#).Validate(minLength: 1)
                                        InputErr(Name: #name#, minLength: Please enter #name#)
                                    }.ElseIf(#control#=="contract"){
                                        Div(row){
                                            Div(col-md-6){
                                                Input(Name: #name#, Type: #type#, Placeholder: $contract$, Value: #value#)
                                            }
                                            Div(col-md-6){
                                                Input(Name: #src#, Type: #type#, Placeholder: $arguments$, Value: #desc#)
                                            }
                                        }
                                    }.ElseIf(#control#=="radio"){
                                        RadioGroup(Name: #name#, Value: #value#, Source: #src#, ValueColumn: id, NameColumn: name)
                                    }
                                    If(And(#desc#!="",#desc#!="NULL")){
                                        P(Class: m0 text-muted, Body: #desc#)
                                    }
                                }
                            }
                        }
                    }
                }

                Div(panel-footer text-right){
                    Div(pull-left){
                        If(#typedec#>0){
                            Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_create, PageParams: "TemplateId=#TemplateId#")
                        }.Else{
                            If(#TemplateId#>0){
                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_template_start, PageParams: "TemplateId=#TemplateId#")
                            }.Else{
                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_templates_list)
                            }
                        }
                    }
                    If(#typedec#>0){
                        Button(Body: LangRes(create), Class: btn btn-primary, Page: voting_templates_list, Contract: voting_TemplateStore)
                    }.Else{
                        Button(Body: LangRes(next), Class: btn btn-primary, Page: voting_template_create, PageParams: "TemplateId=#TemplateId#,TypeDecision=Val(TypeDecision),TypeParticipants=Val(TypeParticipants)")
                    }
                }
            }
        }
    }
}