SetTitle(Platform parameters)
JsonToSource(nodes){
    SysParam(full_nodes)
}
ForList(nodes){
    Div(#key_id#)
}
DBFind(system_parameters, src_sysparams).Order(id).Limit(250).Custom(_actions){
    DBFind(contracts).Where("name='#name#'").Columns(id).Vars(sp)
    If(#sp_id#>0){
        If(#name#=="full_nodes"){
            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: "param_index=#id#,param_name=#name#")
        }.Else{
            Button(Class: btn btn-primary fa fa-edit, Page: sysparams_voting, PageParams: "param_index=#id#,param_name=#name#")
        }
    }.Else{
        condition contract not found
    }
}.Custom(_val){
    Div(){
        #value#
    }.Style(max-width: 500px;overflow: hidden;)
}
Div(content-wrapper){
    Div(breadcrumb){
        Div(Class:text-muted, Body: "Parameters for configuring nodes, transactions, blocks, and payment for network resources.")
        Div(Class:text-muted, Body: "Parameters change only by voting of different roles.")
    }
    DBFind(Name: roles_participants, Source: roles).Columns("id,member->member_id,role->id,role->name,deleted").Where("member->member_id='#key_id#' and role->id='3' and role->name='Validator' and deleted=0").Vars(validator)
    If(#validator_id#>0){
        Div(row){
            Div(col-md-6 col-md-offset-3){
                Div(panel panel-primary text-center){
                    Div(panel-heading){$validator_removing$}
                    Div(panel-body text-center){$validator_removing_desc$}
                    Div(panel-footer text-right){
                        Button(Body: $resign$, Class: btn btn-danger, Page: sysparams_list, Contract: sysparams_ValidatorResign).Alert(Text: $want_resign$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)
                    }
                }
            }
        }
    }
    Div(table-responsive){
        Table(src_sysparams,"ID=id,$name$=name,$value$=_val,=_actions")
    }
}