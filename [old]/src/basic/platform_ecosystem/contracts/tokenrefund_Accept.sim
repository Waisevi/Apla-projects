contract tokenrefund_Accept{
    data{
        Id string
    }
    func closeNotes(){
        var notes array
        notes = DBFind("notifications").Where("page_name='voting_view' and page_params->voting_id=?", $votingID)
        var i int
        while i < Len(notes){
            var note map
            note = notes[i]
            var noteId int
            noteId = Int(note["id"])
            notifications_Close("notific_id", noteId)
            i=i+1
        }
    }
    func refundAmount(victimId, attackerId, amount string){
        tokenrefund_Transfer("SenderId,RecipientId,Amount", attackerId, victimId, amount)
    }
    func unblockAccounts(victimId, attackerId string){
        if victimId==0 {
            error "unblockAccounts. invalid victim key"
        }
        if attackerId==0{
            error "unblockAccounts. invalid attacker key"
        }
        DBUpdate("keys", Int(victimId), "blocked", 0)
        DBUpdate("keys", Int(attackerId), "blocked", 0)
    }

    conditions{
        $tokenrefund = DBFind("tokenrefund").Where("id=?", $Id).Row()
        if !$tokenrefund{
            error "tokenrefund not found"
        }
        $votingID = $tokenrefund["voting_id"]
    }

    action{
        unblockAccounts($tokenrefund["victim_key_id"],$tokenrefund["attacker_key_id"])
        closeNotes()
        if $tokenrefund["result"] == 2 || $tokenrefund["status"] == 3{
            return
        }
        refundAmount($tokenrefund["victim_key_id"],$tokenrefund["attacker_key_id"],$tokenrefund["amount"])
        // status 3: closed; result 2: the tokens returned
        DBUpdate("tokenrefund", Int($tokenrefund["id"]), "status,result", 3,2)
    }
}