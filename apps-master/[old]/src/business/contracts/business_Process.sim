contract business_Process {
    data {
        Id int // business_models:id
        ModelId int // business_models:model_id
        EventId int
        ResultId int
        ObjectType int
        ObjectId int
        Comment string "optional"
        NotificId string "optional"
    }
    func stringInArray(s string, a array) bool{
        var i int
        while i<Len(a){
            if a[i] == s{
                return true
            }
            i=i+1
        }
        return false
    }
    func resultToStatusId(r string)int{
        // Ecosystem param property_statuses
        var statuses map
        statuses[$SUBMIT] = 1 // submited
        statuses[$ESCALATE] = 2 // escalated
        statuses[$SENDBACK] = 3 // sendback
        statuses[$ACCEPT] = 4 // accepted
        statuses[$REJECT] = 5 // rejected
        statuses[$AMACCEPT] = 6 // am_accepted
        var status int
        if statuses[r] {
            status = statuses[r]
        }
        return status
    }
    func updateObject(){
        if Size($objectTable) > 1{
            // if $resultStr == $ACCEPT && stringInArray(Str($role_id), $managerRoleIds){
            //     $resultStr = $AMACCEPT
            // }
            var status int
            status = resultToStatusId($resultStr)
            if status > 0{
                if DBFind($objectTable).WhereId($ObjectId).One("status"){
                    DBUpdate($objectTable, $ObjectId, "status", status)
                }else{
                    warning "Status not found"
                }
            }
            if $objectTable == "property_contracts" && ($resultStr == $ACCEPT || $resultStr == $AMACCEPT) {
                var obj map
                obj = DBFind($objectTable).Where("id=?",$ObjectId).Row()
                if obj {
                    var unitId propertyId int
                    unitId = Int(obj["unit_id"])
                    propertyId = Int(obj["property_id"])
                    if unitId > 0{
                        DBUpdate("units", unitId, "rented,start_date,end_date,tenant_id", $ObjectId, obj["start_date"], obj["end_date"], obj["tenant_id"])
                    }else{
                        if propertyId > 0{
                            DBUpdate("properties", propertyId, "rented,start_date,end_date,tenant_id", $ObjectId, obj["start_date"], obj["end_date"], obj["tenant_id"])
                        }
                    }
                }
            }
        }
    }
    func getAppParamArray(name string, min int) array{
        var res array
        res = Split(AppParam($ApplicationId, name), ",")
        if Len(res) < min {
            warning Sprintf("%v invalid", name)
        }
        return res
    }
    func trim(s string)string{
        while HasPrefix(s, " "){
            s = Substr(s, 1, Size(s))
        }
        while " " == Substr(s, Size(s)-1, 1){
            s = Substr(s, 0, Size(s)-1)
        }
        return s
    }
    func getNextModel()map{
        var nextModel model map
        var i int
        while i<Len($models){
            model = $models[i]
            var cond map
            cond = JSONDecode(model["condition"])
            if cond["0"] == $ResultId || cond[Str($EventId)] == $ResultId {
                nextModel = model
                break
            }
            i=i+1
        }
        return nextModel
    }
    func closeNotify(){
        if $NotificId > 0{
            Notifications_Roles_Processing("notific_id", $NotificId)
            Notifications_Roles_Close("notific_id", $NotificId)
        }
    }
    func sendNext(model map){
        if model {
            var roleId closureType sender int
            roleId = model["role_id"]
            closureType = 2 // multiple
            sender = 2 // from admin?
            var icon header body page string
            icon = "icon-envelope"
            header = Sprintf("Business process: %v", model["title"])
            body = Sprintf("Next step for object id #%v", $ObjectId)
            page = "business_process"
            var params map
            params["id"] = model["id"]
            params["object_id"] = $ObjectId
            params["comment"] = $Comment
            if roleId == $ownerRoleId {
                var initiator string
                initiator = DBFind("business_events").Where("object_id=? and result_id=1 and model_id=?", $ObjectId, $ModelId).Order("event_id asc, id desc").One("key_id")
                if initiator {
                    // if the role is Owner send alert to the initiating user (submit event)
                    Notifications_Single_Send_map("member_id,sender,icon_name,text_header,text_body,page_name,params_map", Int(initiator), sender, icon, header, body, page, params)
                }else{
                    warning "Initiator process not found"
                }
            }else{
                Notifications_Roles_Send_map("rid,closure_type,sender,icon_name,text_header,text_body,page_name,params_map", roleId, closureType, sender, icon, header, body, page, params)
            }
        }
    }
    conditions {
        $ApplicationId = Int(DBFind("applications").Where("name='Business'").One("id"))
        if $ApplicationId == 0 {
            warning "Application ID not found"
        }
        $ownerRoleId = Int(AppParam($ApplicationId,"owner_role_id"))
        if $ownerRoleId == 0 {
            info "Application parameter owner_role_id not found"
        }
        $SUBMIT = "Submit"
        $ESCALATE = "Escalate"
        $SENDBACK = "Send Back"
        $ACCEPT = "Accept"
        $REJECT = "Reject"
        $AMACCEPT = "AM Accept"

        $results = getAppParamArray("results", $ResultId)
        $objectTypes = getAppParamArray("object_types", $ObjectType)
        $managerRoleIds = getAppParamArray("manager_role_ids", 1)
        $objectTables = getAppParamArray("object_status_tables", $ObjectType)

        $objectTable = trim($objectTables[$ObjectType-1])
        $resultStr = trim($results[$ResultId-1])
        $objectStr = trim($objectTypes[$ObjectType-1])

        $numSubmitted = Int(DBFind("business_events").Where("event_id=? and object_type=? and object_id=? and key_id=? and result_id=? and model_id=?", $EventId, $ObjectType, $ObjectId, $key_id, $ResultId, $ModelId).Order("num_submitted desc").One("num_submitted")) + 1
        $models = DBFind("business_models").Order("event_id").Where("deleted='0' and model_id=?", $ModelId)

        var currentModel map
        currentModel = DBFind("business_models").Where("deleted='0' and id=?", $Id).Row()
        if !currentModel{
            error "Business model not found"
        }
        if $resultStr == "Submit" || $resultStr == "Send Back"{
            if currentModel["need_comment"] == 1 && Size($Comment) < 1 {
                warning "Need comment"
            }
        }
        $NotificId = Int($NotificId)
    }
    action {
        DBInsert("business_events", "event_id,object_type,object_id,key_id,result_id,comment,num_submitted,created_at,model_id", $EventId, $ObjectType, $ObjectId, $key_id, $ResultId, $Comment, $numSubmitted, "Now()", $ModelId)
        updateObject()
        sendNext(getNextModel())
        closeNotify()
    }
}