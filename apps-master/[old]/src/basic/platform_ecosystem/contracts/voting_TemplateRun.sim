contract voting_TemplateRun{
    data{
        TemplateId int
        Duration int

        KeyId int "optional"
        TableWritten string "optional"
        RowId string "optional"
        ColumnName string "optional"
        NewValue string "optional"
        TextDocument string "optional"
    }
    func checkInput(value, name string){
        if Size(value) == 0 || value == "NULL" {
            warning Sprintf("%q not found", name)
        }
    }
    func emptyOrValue(value string) string{
        if value == "NULL" {
            value = ""
        }
        return value
    }

    conditions{
        var template map
        template = DBFind("voting_templates").Where("id=?",$TemplateId).Row()
        if !template{
            warning "Voting template not found"
        }
        if $KeyId != 0{
            $keyFind = DBFind("keys").Where("id=?", $KeyId).Row()
            if !$keyFind{
                warning "Key id not found"
            }
        }
        if $Duration <= 0{
            $Duration = 3
        }
 
        var initContract string
        initContract = template["init_contract"]
        $voters = template["voters"]
        $candidates = template["candidates"]
        $votingName = Sprintf("%v [template id:%v]", template["title"], $TemplateId)
        $volume = Int(template["volume"])
        $quorum = Int(template["quorum"])
        $type_voting = Int(template["type_voting"])
        $participants = Int(template["type_participants"])
        $decision = Int(template["type_decision"])
        $vacancies = Int(template["vacancies"])

        if initContract != "" && initContract != "NULL"{
            var initParam map
            if $decision == 4 && $type_voting == 2 {
                // voting for new value of sysparam
                initParam["Name"] = $ColumnName
                initParam["Value"] = $NewValue
            }else{
                initParam["KeyId"] = $KeyId
            }
            CallContract(initContract, initParam)
        }

        $desc = Sprintf("template #%v", $TemplateId)
        if $type_voting < 1 || $type_voting > 2 {
            warning "Invalid type of voting"
        }
        $contractAccept = emptyOrValue(template["contract_accept"])
        $acceptParams = emptyOrValue(template["accept_params"])
        $contractReject = emptyOrValue(template["contract_reject"])
        $rejectParams = emptyOrValue(template["reject_params"])

        if $decision == 1 || $decision == 2 {
            // role-candidates
            checkInput($candidates, "Candidate role")
            var candidate map
            candidate = DBFind("roles").Where("id=? and deleted=0", $candidates).Row()
            if !candidate {
                warning Sprintf("Candidates role (id: %v) not found", $candidates)
            }
            $candidateId = Int(candidate["id"])
        }

        if $decision == 3 {
            // document approval
            checkInput($TextDocument, "TextDocument")
        }

        if $decision == 4 {
            // formal decision
            // in the system vote need only a field and a value
            checkInput($ColumnName, "ColumnName")
            checkInput($NewValue, "NewValue")
            if $type_voting == 2{
                $desc = Sprintf("Parameter: %v, Value: %v", $ColumnName, $NewValue)
            }

            if $type_voting == 1{
                checkInput($TableWritten, "TableWritten")
                checkInput($RowId, "RowId")
                $desc = Sprintf("Table: %v, Column: %v, ID: %v, Value: %v", $TableWritten, $ColumnName, $RowId, $NewValue)
            }
            if $RowId == "" || $RowId == "NULL"{
                $RowId = 0
            }

        }
        // check duplicated
        if DBFind("votings").Where("voting->name=? and flags->decision not in ('1', '-1') and deleted=0", $votingName).Row(){
            error "Same voting already created"
        }


        if $participants == 3 {
            // if the type of the participants "in role" - check the role
            var role map
            role = DBFind("roles").Where("id=? and deleted=0", $voters).Row()
            if !role {
                warning Sprintf("Voters role (id: %v) not found", $voters)
            }
            $roleId = Int(role["id"])
        }
    }

    action{
        var votingId int
        votingId = voting_CreateNew("voting_name,voting_type,description,type_participants,type_decision,volume,quorum,interval", $votingName, $type_voting, $desc, $participants, $decision, $volume, $quorum, $Duration)

        if votingId == 0 {
            warning "votingId is zero"
        }
        // the default argument for Contract
        var defaultParams string
        defaultParams = Sprintf(`{"VotingTemplateId":"%v","KeyId":"%v","VotingId":"%v"}`, $TemplateId, $KeyId, votingId)

        if Size($acceptParams) == 0{
            $acceptParams = defaultParams
        }
        if Size($rejectParams) == 0{
            $rejectParams = defaultParams
        }

        if $decision == 1 || $decision == 2{
            // 1. Role candidates with the registration of participants on request
            // 2. Role candidates with manual registration of the participants
            voting_SubjectCandidates("votingID,memberID", votingId, $KeyId)
            voting_SubjectSettings("votingID,roleID,vacancies,contract_accept,contract_accept_params,contract_reject,contract_reject_params", votingId, $candidateId, $vacancies, $contractAccept, $acceptParams, $contractReject,$rejectParams)
        }
        if $decision == 3 {
            // Document approval
            voting_SubjectDocument("votingID,text_document,contract_accept,contract_accept_params,contract_reject,contract_reject_params", votingId,$TextDocument, $contractAccept, $acceptParams, $contractReject, $rejectParams)
        }

        if $decision == 4 {
            // Formal decision
            voting_SubjectFormal("votingID,description,table_to_written,row_id,column_name,written_value,contract_accept,contract_accept_params,contract_reject,contract_reject_params",votingId, $desc, $TableWritten, $RowId, $ColumnName, $NewValue, $contractAccept, $acceptParams, $contractReject, $rejectParams)

        }

        if $decision == 5 {
            // Execution of the contract
            voting_SubjectContract("votingID,contract_accept,contract_accept_params,contract_reject,contract_reject_params",votingId,$contractAccept, $acceptParams, $contractReject, $rejectParams)
        }
        if $participants == 3 {
            // participants: "by role"
            voting_Invite("votingID,var_id", votingId, $roleId)
        }
        if $participants == 1 {
            // if the participants are "all", the invite has already occurred in "voting_CreateNew"
        }
    }
}