contract sysparams_DelegateRefresh{
    func NotInArray(val string, arr array) bool{
        var i int
        // info arr
        while i< Len(arr){
            if val == arr[i]{
                return false
            }
            i=i+1
        }
        return true
    }

    conditions{
        MainCondition()

        var ROLE_NAME string ROLE_ID int
        ROLE_NAME = "Delegate"
        ROLE_ID = 7

        // get role Id and Type
        $role = DBFind("roles").Where("role_name=? and id=? and deleted=0", ROLE_NAME, ROLE_ID).Row()
        if !$role{
            warning Sprintf("Role %q not found", ROLE_NAME)
        }
    }

    action{
        // get delegates ids
        var delegateIds currentDelegates ecosystems array
        ecosystems = DBFind("ecosystems").Columns("id").Ecosystem(1)
        var i ecoId int
        while i < Len(ecosystems) {
            var eco delegateParam map
            eco = ecosystems[i]
            ecoId = Int(eco["id"])
            delegateParam = DBFind("parameters").Where("name='delegate_account'").Ecosystem(ecoId).Row()
            if !delegateParam{
                delegateParam = DBFind("parameters").Where("name='founder_account'").Ecosystem(ecoId).Row()
            }

            if NotInArray(delegateParam["value"], delegateIds){
                delegateIds = Append(delegateIds, delegateParam["value"])
            }
            i = i + 1
        }

        // remove old role assigns
        currentDelegates = DBFind("roles_participants").Columns("id,member->member_id").Where("role->id=? and deleted=0", $role["id"])
        i = 0
        while i < Len(currentDelegates){
            var delegate map
            delegate = currentDelegates[i]
            if NotInArray(delegate["member.member_id"], delegateIds){
                var id int
                id = Int(delegate["id"])
                Roles_Unassign("row_id", id)
            }
            i = i + 1
        }

        // assign new roles
        i = 0
        while i < Len(delegateIds) {
            var delegateId int
            delegateId = Int(delegateIds[i])
            var key map
            key = DBFind("keys").Where("id=?",delegateId).Row()
            if key {
                // check role dup
                var assigned map
                assigned = DBFind("roles_participants").Where("member->member_id=? and role->id=? and deleted=0", delegateId, $role["id"]).Row()
                if !assigned{
                    Roles_Assign("rid,member_id", Int($role["id"]), Int(key["id"]))
                }
            }
            i=i+1
        }
    }
}