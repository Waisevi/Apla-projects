contract voting_Invite {
    data {
        votingID int
        var_id int //0, member_id, role_id
    }
    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }
    func addVotingKey(key map, votingId int) {
        var m map
        m["member_id"] = key["id"]
        m["member_name"] = IdToAddress(Int(key["id"]))
        DBInsert("votings_participants", "voting_id,member", votingId, m)
    }
    conditions {
        $voting = DBFind("votings").Columns("progress,progress->number_participants,voting->type_participants,voting->type,id,date_ended").Where("id=$ and date_ended > $", $votingID, BlockTime()).Row()
        if !$voting {
            warning "Voting has expired. Can not add new participants"
        }

        $type_participants = $voting["voting.type_participants"]
        $type_voting = $voting["voting.type"]
        $number_participants = Int($voting["progress.number_participants"])

        if $number_participants > 1 && $type_voting == 2 {
            warning "This vote is a system. Add new participants are not possible"
        }
        var isAdded string
        if $type_participants == 2 {
            if !DBFind("keys").Where("id=?", $var_id).Row(){
                warning "Key not found"
            }
            isAdded = DBFind("votings_participants").Where("voting_id=$ and member->member_id=$", $votingID, $var_id).One("id")
            if isAdded {
                warning "Member has already been added before"
            }
        }

        if $type_participants == 3 {
            isAdded = DBFind("votings_participants").Where("voting_id=$", $votingID).One("id")
            if isAdded {
                warning "Voting participants have already been added before"
            }
            if Len(DBFind("roles_participants").Where("role->id=? and deleted=0", $var_id)) == 0 {
                warning "Roles participants not found"
            }
        }
    }

    action {
        var i int
        if $type_participants == 1 { // everybody
            var keys array
            keys = DBFind("keys")
            while i < Len(keys) {
                addVotingKey(keys[i], $votingID)
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }
        if $type_participants == 2 { // manual
            var key map
            key = DBFind("keys").Where("id=?", $var_id).Row()
            addVotingKey(key, $votingID)
            $number_participants = $number_participants + 1
        }
        if $type_participants == 3 { // role
            var roles array
            roles = DBFind("roles_participants").Where("role->id=$ and deleted=0", $var_id).Order("id")
            while i < Len(roles) {
                var role map
                role = roles[i]
                DBInsert("votings_participants", "voting_id,member", $votingID, role["member"])
                $number_participants = $number_participants + 1
                i = i + 1
            }
        }

        if $type_participants == 3 {
            DBUpdate("votings", $votingID, "progress->number_participants,voting->role_id", $number_participants, $var_id)
        }else{
            DBUpdate("votings", $votingID, "progress->number_participants", $number_participants)
        }
        voting_SendNotifics("votingID", $votingID)
    }
}