contract voting_CheckDecision {
    data {
        votingID int
    }
    func runContract(cont, p string){
        if Size(cont) > 0 {
            var params map
            if Size(p) > 0 {
                params = JSONToMap(p)
            }
            CallContract(cont, params)
        }
    }
    func percentPartOfTotal(part, total int) int {
        if total == 0{ total = 1 }
        var percent int
        percent = Int((part * 100)/total)
        if percent > 100 { percent = 100 }
        return percent
    }
    func closeNotes(){
        var notes array
        notes = DBFind("notifications").Where("page_name='voting_view' and page_params->voting_id=?", $votingID)
        var i int
        while i < Len(notes){
            var note map
            note = notes[i]
            var noteId int
            noteId = Int(note["id"])
            notifications_Close("notific_id", noteId)
            i=i+1
        }
    }
    conditions {
        $voting_map = DBFind("votings").Columns("voting->name,voting->type,voting->quorum,voting->type_decision,flags->success,progress->number_voters,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params").Where("id=? and (CAST(progress->percent_voters as INTEGER)>=CAST(voting->quorum as INTEGER) or date_ended<?)", $votingID, BlockTime()).Row()
        if !$voting_map {
            warning "Voting has not expired. Try again later, please"
        }

        $subject_id = DBFind("votings_subject").Where("voting_id=$", $votingID).One("id")
        if !$subject_id {
            warning "Subject of voting is not found"
        }

        $voting_name = $voting_map["voting.name"]
        $voting_type = Int($voting_map["voting.type"]) //system or custom
        $quorum = Int($voting_map["voting.quorum"])
        $type_decision = Int($voting_map["voting.type_decision"])
        $optional_role_id = Int($voting_map["optional.role_id"])
        $number_role_vacancies = Int($voting_map["optional.role_vacancies"])
        $number_voters = Int($voting_map["progress.number_voters"]) // already voted
        $contract_accept = $voting_map["optional.contract_accept"]
        $contract_reject = $voting_map["optional.contract_reject"]
        $param_accept = $voting_map["optional.contract_accept_params"]
        $param_reject = $voting_map["optional.contract_reject_params"]
        $flag_success = $voting_map["flags.success"]
    }

    action {
        // if notifications have been sent, then close it
        var notes array
        notes = DBFind("notifications").Where("page_name='voting_view' and page_params::jsonb->voting_id=? and closed=0", $votingID)
        var i int
        while i < Len(notes) {
            var note map
            note = notes[i]
            notifications_Close("notific_id", Int(note["id"]))
            i = i + 1
        }

        var percent_voters, flag_decision int
        flag_decision = -2 // decision can not be made (not enough participants to make a decision)
        if $flag_success == 1 { //now enough participants to make a decision

            if $type_decision == 1 || $type_decision == 2 {
                var candidates_added_count int
                candidates_added_count = 0 // candidates who have already been added
                flag_decision = -1 // none of the candidates has been added yet

                var subjects array
                subjects = DBFind("votings_subject").Columns("voting_id,number_accept,subject->member_id,subject->member_name,subject->image_id").Where("voting_id=$", $votingID).Order("number_accept DESC")
                i = 0
                while i < Len(subjects) {
                    var subject map
                    subject = subjects[i]

                    // if there are still vacancies
                    if candidates_added_count < $number_role_vacancies {
                        percent_voters = percentPartOfTotal(Int(subject["number_accept"]), $number_voters)

                        if percent_voters >= $quorum {
                            // added candidate to the role
                            var role map
                            role = DBFind("roles").Columns("id,role_type,role_name,image_id").Where("id=$", $optional_role_id).Row()
                            if role {
                                var member, assignedMember map
                                member["member_id"] = subject["subject.member_id"]
                                assignedMember = DBFind("roles_participants").Where("member->member_id=? and role->id=? and deleted=0", member["member_id"], role["id"]).Row()

                                if !assignedMember {
                                    member["member_name"] = subject["subject.member_name"]
                                    member["image_id"] = subject["subject.image_id"]

                                    var rolePart map
                                    rolePart["id"] = role["id"]
                                    rolePart["type"] = role["role_type"]
                                    rolePart["name"] = role["role_name"]
                                    rolePart["image_id"] = role["image_id"]

                                    var appointed map
                                    appointed["voting_id"] = $votingID
                                    appointed["voting_name"] = $voting_name

                                    // add a candidate to the role
                                    DBInsert("roles_participants", "role,member,appointed,timestamp date_created", rolePart, member, appointed, $block_time)

                                    candidates_added_count = candidates_added_count + 1
                                    // if at least one of the candidates was added to the role, then the voting decision is considered successful
                                    flag_decision = 1
                                }
                            }
                        }
                    }
                    i = i + 1
                }
            }

            if $type_decision == 3 {
                var subject map
                subject = DBFind("votings_subject").Columns("id,number_accept").Where("voting_id=$", $votingID).Row()
                if subject {
                    percent_voters = percentPartOfTotal(Int(subject["number_accept"]), $number_voters)
                    if percent_voters >= $quorum {
                        flag_decision = 1 // accepted
                    } else {
                        flag_decision = -1 // rejected
                    }
                }
            }

            if $type_decision == 4 {
                var subject map
                subject = DBFind("votings_subject").Columns("id,number_accept,subject->table,subject->table_id,subject->column,subject->column_value").Where("voting_id=$", $votingID).Row()
                if subject {
                    percent_voters = percentPartOfTotal(Int(subject["number_accept"]), $number_voters)
                    if percent_voters >= $quorum {
                        flag_decision = 1 // accepted

                        var column string
                        column = Str(subject["subject.column"])
                        $colValue = Str(subject["subject.column_value"])
                        // type of voting - custom
                        if $voting_type == 1 {
                            // ALWAYS CHECK THE PERMISSION
                            var colType string
                            colType = GetColumnType(subject["subject.table"], column)
                            if colType == "number"{
                                $colValue = Int($colValue)
                            }
                            if colType == "money"{
                                $colValue = Money($colValue)
                            }
                            if colType == "double" {
                                $colValue = Float($colValue)
                            }
                            DBUpdate(subject["subject.table"], Int(subject["subject.table_id"]), column, $colValue)
                        }

                        // type of voting - system
                        if $voting_type == 2 {
                            @1UpdateSysParam("Name,Value,Conditions", column, $colValue, "")
                        }
                    } else {
                        flag_decision = -1 // rejected
                    }
                }
            }

            if $type_decision == 5 {
                var subject map
                subject = DBFind("votings_subject").Columns("id,number_accept,subject->contract_accept,subject->contract_reject,subject->contract_accept_params,subject->contract_reject_params").Where("voting_id=$", $votingID).Row()
                if subject {
                    $contract_accept = subject["subject.contract_accept"]
                    $contract_reject = subject["subject.contract_reject"]
                    $param_accept = subject["subject.contract_accept_params"]
                    $param_reject = subject["subject.contract_reject_params"]

                    percent_voters = percentPartOfTotal(Int(subject["number_accept"]), $number_voters)
                    if percent_voters >= $quorum {
                        flag_decision = 1 // accepted
                    } else {
                        flag_decision = -1 // rejected
                    }
                }
            }

            if flag_decision == 1 {
                runContract($contract_accept, $param_accept)
                closeNotes()
            }
            if flag_decision == -1 {
                runContract($contract_reject, $param_reject)
                closeNotes()
            }
        }

        DBUpdate("votings", $votingID, "flags->decision", flag_decision)
    }
}