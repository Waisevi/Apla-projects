Div(content-wrapper){
    If(#vID# > 0){
        DBFind(votings).WhereId(#vID#).Columns("id,voting->name,optional->role_id,optional->role_vacancies,optional->contract_accept,optional->contract_reject,optional->contract_accept_params,optional->contract_reject_params").Vars(instance)
        DBFind(roles,src_roles).Where({role_type:2, deleted:0}).Columns("id,role_name").Count(elective_roles_count)
        DBFind(votings_subject).Where({voting_id:#vID#, "subject->member_id":#key_id#}).Columns("id").Vars(already_candidate)

        SetTitle($subject_voting$)
        Div(breadcrumb){
            LinkPage($voting$, voting_list)
            Span(/,mh)
            LinkPage(#instance_voting_name#, voting_view,, "vID=#vID#")
            Span(/,mh)
            Span(Class: text-muted, Body: $subject_voting$)
        }
        If(#elective_roles_count#>0){
            Div(row mt-sm){
                Div(col-sm-10 col-sm-offset-1 col-lg-8 col-lg-offset-2){
                    Form(panel panel-primary){
                        Div(panel-body){
                            SetVar(hidden,)
                            If(#already_candidate_id#>0){
                                SetVar(hidden,hidden)
                            }
                            Div(row mt-sm #hidden#){
                                Div(col-md-3 mt-sm text-right){
                                    Label(){
                                        Span(Body: LangRes(candidates))
                                        Span(Class: text-danger, Body:*)
                                    }
                                }
                                Div(col-md-9 text-left){
                                    Div(input-group){
                                        Input(Name: can_apply_voting, Disabled: 1, Value: "$can_apply_voting$")
                                        Div(input-group-btn){
                                            Button(Body: LangRes(apply), Class: btn btn-primary, Page: voting_decision_candidates, PageParams: "vID=#vID#", Contract: VotingSubjectCandidates)
                                        }
                                    }
                                }
                            }

                            Div(row mt-sm){
                                Div(col-sm-9 col-sm-offset-3){
                                    DBFind(votings_subject,src_voting_subject).Where({voting_id:#vID#}).Columns("id,subject->member_id,subject->member_name").Custom(_address){
                                        Address(#subject.member_id#)
                                    }.Custom(_member){
                                        LinkPage(Class: text-primary h5 text-bold, Page: profile_view, PageParams: "v_member_id=#subject.member_id#"){
                                            Span(Body: #subject.member_name#)
                                        }
                                    }
                                    Table(src_voting_subject, "$candidates$=_member,$address$=_address")
                                }
                            }
                            Div(form-group){
                                Div(row mt-sm){
                                    Div(col-md-3 mt-sm text-right){
                                        Label(){
                                            Span(Body: LangRes(role))
                                            Span(Class: text-danger, Body:*)
                                        }
                                    }
                                    Div(col-md-9 text-left){
                                        Select(Name: roleID, Source: src_roles, NameColumn: role_name, ValueColumn: id, Value: #instance_optional_role_id#)
                                    }
                                }
                                Div(row mt-sm){
                                    Div(col-md-3 mt-sm text-right){
                                        Label(){
                                            Span(Body: LangRes(vacancies))
                                            Span(Class: text-danger, Body:*)
                                        }
                                    }
                                    Div(col-md-9 text-left){
                                        Input(Name: vacancies, Type: Number, Value: #instance_optional_role_vacancies#)
                                    }
                                }
                            }
                            Div(form-group){
                                Div(row mt-sm){
                                    Div(col-md-3 mt-sm text-right){
                                        Label(){
                                            Span(Body: LangRes(contract_accept))
                                        }
                                    }
                                    Div(col-md-9 text-left){
                                        Input(Name: contract_accept, Value: #instance_optional_contract_accept#, Placeholder: "$contract_accept_des$").Validate(minLength:3, maxLength:255)
                                        InputErr(Name: contract_accept, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)
                                    }
                                }
                                Div(row mt-sm){
                                    Div(col-md-3 mt-sm text-right){
                                        Label(){
                                            Span(Body: LangRes(params))
                                        }
                                    }
                                    Div(col-md-9 text-left){
                                        Input(Name: contract_accept_params, Value: #instance_optional_contract_accept_params#, Placeholder: "$contract_params_des$")
                                    }
                                }
                                Div(row mt-sm){
                                    Div(col-md-3 mt-sm text-right){
                                        Label(){
                                            Span(Body: LangRes(contract_reject))
                                        }
                                    }
                                    Div(col-md-9 text-left){
                                        Input(Name: contract_reject, Value: #instance_optional_contract_reject#, Placeholder: "$contract_reject_des$").Validate(minLength:3, maxLength:255)
                                        InputErr(Name: contract_reject, minLength: $validate_contract_name$, maxLength: $validate_contract_name$)
                                    }
                                }
                                Div(row mt-sm){
                                    Div(col-md-3 mt-sm text-right){
                                        Label(){
                                            Span(Body: LangRes(params))
                                        }
                                    }
                                    Div(col-md-9 text-left){
                                        Input(Name: contract_reject_params, Value: #instance_optional_contract_reject_params#, Placeholder: "$contract_params_des$")
                                    }
                                }
                            }
                        }
                        Div(panel-footer text-right){
                            Div(pull-left){
                                Button(Body: LangRes(back), Class: btn btn-default, Page: voting_view, PageParams: "vID=#vID#")
                            }
                            Input(Name: memberID, Type: hidden, Value: 0)
                            Input(Name: votingID, Type: hidden, Value: #vID#)
                            Button(Body: LangRes(save), Class: btn btn-primary, Page: voting_view, PageParams: "vID=#vID#", Contract: VotingSubjectSettings)
                        }
                    }
                }
            }
        }.Else{
            Div(row){
                Div(col-md-12 text-center h3){
                    P(LangRes(elective_roles_not_found))
                    Button(Class: btn btn-link, Page: roles_create, PageParams: "back_page=voting_decision_candidates,vID=#vID#"){
                        Span(Class: h3, Body: LangRes(create_role))
                    }.Popup(50, $edit_role$)
                }
            }
        }
    }.Else{
        Div(md-12 alert alert-danger text-center){
            Span(Body: LangRes(attention))
        }
    }
}