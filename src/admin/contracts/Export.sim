contract Export {
    data {}

    func createExport(items array) string {
        var res map
        res["name"] = $AppName
        res["conditions"] = $AppConditions
        res["data"] = items
        return JSONEncodeIndent(res, "    ")
    }
    func mapping(res map, resKey string, item map itemKey string){
        if item[itemKey] {
            res[resKey] = Str(item[itemKey])
        }
    }
    func prepareItem(item map, type string) string {
        var res map
        res["Type"] = type
        mapping(res, "Name", item, "name")
        mapping(res, "Value", item, "value")
        mapping(res, "Conditions", item, "conditions")
        mapping(res, "Menu", item, "menu")
        mapping(res, "Title", item, "title")
        mapping(res, "Trans", item, "res")
        mapping(res, "Columns", item, "columns")
        mapping(res, "Permissions", item, "permissions")
        mapping(res, "Confirmation", item, "confirmation")
        return res
    }

    func getColumnsWithType(table_name string, columnsJSON string) string {
        var colsMap map result columns array
        colsMap = JSONDecode(columnsJSON)
        columns = GetMapKeys(colsMap)
        var i int
        while i < Len(columns){
            if Size(columns[i]) > 0 {
                var col map
                col["name"] = columns[i]
                col["conditions"] = colsMap[col["name"]]
                col["type"] = GetColumnType(table_name, col["name"])
                result = Append(result, col)
            }
            i = i + 1
        }
        return JSONEncode(result)
    }

    func exportTable(type string, result array) array {
        var items array limit offset i lenItems int item map
        limit = 250
        while true{
            var rows array where map
            if type == "menu" {
                if Len($menus_names) > 0 {
                    where["name"] = {"$in": $menus_names}
                }
            }else{
                where["app_id"] = $AppID
            }
            if where {
                rows = DBFind(type).Limit(limit).Offset(offset).Where(where)
            }
            if Len(rows) > 0{
                i = 0
                while i < Len(rows){
                    items = Append(items, rows[i])
                    i = i + 1
                }
            }else{
                break
            }
            offset = offset + limit
        }
        i = 0
        lenItems = Len(items)
        while i < lenItems {
            item = items[i]
            if type == "tables" {
                item["columns"] = getColumnsWithType(item["name"], item["columns"])
            }
            result = Append(result, prepareItem(item, type))
            if type == "pages" {
                $menus_names = Append($menus_names, Sprintf("'%v'", item["menu"]))
            }
            i = i + 1
        }
        return result
    }

    conditions {
        var buf app map
        buf = DBFind("buffer_data").Columns("id,value->app_id,value->app_name").Where({member_id:$key_id, key: "export"}).Row()
        if !buf{
            warning "Application not selected"
        }
        $AppID = Int(buf["value.app_id"])
        $AppName = Str(buf["value.app_name"])

        app = DBFind("applications").Columns("id,conditions").Where({id:$AppID}).Row()
        if !app{
            warning "Application not found"
        }
        $AppConditions = app["conditions"]

        $menus_names = []
    }

    action {
        var exportJSON string items array
        items = exportTable("pages", items)
        items = exportTable("contracts", items)
        items = exportTable("blocks", items)
        items = exportTable("languages", items)
        items = exportTable("app_params", items)
        items = exportTable("tables", items)
        items = exportTable("menu", items)

        exportJSON = createExport(items)
        UploadBinary("Name,Data,ApplicationId,DataMimeType", "export", exportJSON, 1, "application/json")
    }
}