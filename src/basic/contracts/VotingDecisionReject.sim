contract VotingDecisionReject {
    data {
        votingID int
    }
    func closeNotification(){
        var id int
        id = Int(DBFind("notifications").Where({"recipient->member_id":$key_id, page_name:"voting_view", "page_params->voting_id":$votingID, closed:0}).One("id"))
        if id > 0 {
            NotificationsClose("notific_id", id)
        }
    }
    conditions {
        $WAITING = 1
        $VALID = 2
        $STARTED = 3
        $FINISHED = 4
        $INVALID = 5
        $voting = DBFind("votings").WhereId($votingID).Columns("voting->type_participants,voting->role_id,flags->decision,flags->notifics,status").Row()
        if !$voting {
            warning "Voting is not found"
        }
        if $voting["voting.type_participants"] == 3{
            if $voting["voting.role_id"] != $role_id{
                warning "Incorrect role for voting"
            }
        }
        if $voting["status"] == $FINISHED {
            warning "Voting has expired. Voting is now not possible"
        }
        if $voting["status"] != $STARTED {
            warning "Voting has not yet begun. Try again later, please"
        }
        $participant_id = DBFind("votings_participants").Where({voting_id:$votingID, "member->member_id":$key_id}).One("id")
        if !$participant_id {
            warning "You are not a participant in this voting"
        }
    }

    action {
        if $voting["flags.notifics"] == 1 {
            closeNotification()
        }
        if $voting["flags.decision"] != 1 {
            var bt string
            bt = BlockTime()

            DBUpdate("votings_participants", Int($participant_id), {decision_date:bt, decision:"-1"})
            VotingUpdate("votingID", $votingID)
        }
    }
}