contract VotingSubjectContract {
    data {
        votingID int

        contract_accept string
        contract_accept_params string "optional"

        contract_reject string
        contract_reject_params string "optional"
    }
    func safeJsonToMap(m string) map {
        var res map
        if Size(m) > 0 { res = JSONToMap(m) }
        return res
    }

    conditions {
        $STARTED = 3
        $FINISHED = 4
        $voting = DBFind("votings").Where({id:$votingID, status:[{"$neq":$STARTED},{"$neq":$FINISHED}]}).Columns("id,date_started,voting->type,flags->full_data").Row()
        if !$voting {
            warning "Voting already started. Can not edit document"
        }

        if $voting["flags.full_data"] == 1 && $voting["voting.type"] == 2 {
            warning "This vote is a system. Change settings not allowed"
        }
    }

    action {
        var accept_params, reject_params map
        accept_params = safeJsonToMap($contract_accept_params)
        reject_params = safeJsonToMap($contract_reject_params)

        var subject map
        subject["contract_accept"] = $contract_accept
        subject["contract_accept_params"] = accept_params
        subject["contract_reject"] = $contract_reject
        subject["contract_reject_params"] = reject_params

        $subject_id = DBFind("votings_subject").Where({voting_id:$votingID}).One("id")
        if $subject_id {
            DBUpdate("votings_subject", Int($subject_id), {subject:subject})
        } else {
            DBInsert("votings_subject", {voting_id:$votingID, subject:subject})
        }

        VotingSubjectCheck("votingID", $votingID)
    }
}